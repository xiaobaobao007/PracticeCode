package com.mqtt.yiyi.game.handler;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.mqtt.yiyi.core.handler.entity.ChannelEntity;
import com.mqtt.yiyi.core.util.MemPool;
import com.mqtt.yiyi.core.util.MyX509TrustManager;
import com.mqtt.yiyi.core.util.StringUtils;
import com.mqtt.yiyi.game.AbstractHandler;
import com.mqtt.yiyi.game.MsgFactoryManager;
import com.mqtt.yiyi.game.api.MD5;
import com.mqtt.yiyi.game.common.Constants;
import com.mqtt.yiyi.game.common.MsgID;
import com.mqtt.yiyi.game.common.MsgUtils;
import com.mqtt.yiyi.game.util.WXInfoEnum;
import com.mqtt.yiyi.model.PlayerModel;
import com.mqtt.yiyi.service.PlayerService;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.util.ArrayList;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;

public class PLoginHandler extends AbstractHandler {
	private static final InternalLogger logger = InternalLoggerFactory.getInstance(PLoginHandler.class);

	//网站：wxaec5247414ba60aa
	//aac01c5edcdb27edea0d80e33692e52a
	@Override
	public void handleMessage(String clientId, int _uid, int code, JSONObject obj) {
		//logger.warn("new Class!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		JSONObject data = obj.containsKey("data") ? obj.getJSONObject("data") : obj;
		if (!data.containsKey("secretKey")) {
			return;
		}
		// logger.warn("login2");
		ChannelEntity channelEntity = MemPool.getChannelEntryByClientId(clientId);
		if (channelEntity == null)
			return;
		// InetSocketAddress insocket = (InetSocketAddress)
		// channelEntity.getChannel().remoteAddress();
		// final String ip_string = insocket.getAddress().getCanonicalHostName();
		// logger.warn("login3");
		final String ip = channelEntity.getChannel().remoteAddress().toString()
				.replaceAll("/(\\d+\\.\\d+\\.\\d+\\.\\d+):.*", "$1");
		final String ip_string = clientId;
		try {
			login(clientId, ip, data, ip_string);
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 玩家登陆
	 *
	 * @param clientId
	 * @param ip
	 * @param data
	 * @throws Exception
	 */
	public void login(final String clientId, final String ip, final JSONObject data, final String ip_string)
			throws Throwable, NoSuchProviderException {
		// logger.warn("login4");
		String secretKey = data.getString("secretKey");
		if (!StringUtils.noEmpty(secretKey)) {
			return;
		}
		// logger.warn("login5");
		try {
			// 查询玩家
			PlayerModel player = null;
			String loginTypeStr = null;

			ChannelEntity channelEntity = MemPool.getChannelEntryByClientId(clientId);

			int loginType = -1;//1-yiyi，2-wx，3-yk，0-gm
			JSONObject json = null;
			if (data.containsKey("loginType")) {// 1-yiyi登陆,2-微信登陆,0-系统登陆
				loginTypeStr = data.getString("loginType");
				if (!StringUtils.noEmpty(loginTypeStr)) {
					return;
				}
				if (loginTypeStr.equals("wx")) {
					if (!data.containsKey("code") || !data.containsKey("uid"))
						return;
					loginType = 2;
					String code = data.getString("code");
					int uid = data.getIntValue("uid");
					if (StringUtils.noEmpty(code) && uid == -1) {// code登陆
						logger.warn("code登陆");
						int type = data.getInteger("app");
						json = this.wxCodeLogin(data, clientId, type);
						if (json == null) {
							logger.warn("json == null");
							return;
						}
						player = PlayerService.findPlayer(false, json.getString("openid"), data.getString("os"));
						if (player != null) {
							player.salt = (int) (1 + Math.random() * 9999);
							player.secretKey = MD5.to32MD5(secretKey + player.salt, "UTF8");
						}
					} else {
                        int type = data.getInteger("app");
                        WXInfoEnum wxInfoEnum = WXInfoEnum.obtainWXInfo(type);
						String appId = wxInfoEnum.getAppId();
						String secret = wxInfoEnum.getSecret();
						player = PlayerService.findPlayerByUid(uid);
						if (player != null) {
							if (player.secretKey.equals(MD5.to32MD5(secretKey + player.salt, "UTF8"))) {
//								MsgUtils.sendError(clientId, MsgID.CMD_LOGIN_RESPONSE, -1);
//								logger.warn("player.secretKey:" + player.secretKey + ",sec:"
//										+ MD5.to32MD5(secretKey + player.salt, "UTF8"));
//								return;
							} else {
								String urlStr = "https://api.weixin.qq.com/sns/auth?access_token=" + player.access_token
										+ "&openid=" + player.openid;
								String returnStr = getResult(urlStr, "", "utf-8");
								json = JSON.parseObject(returnStr);
								if (json.containsKey("errcode")) {
									if (json.getIntValue("errcode") != 0) {
										urlStr = "https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=" +
                                                appId +
                                                "&grant_type=refresh_token&refresh_token="
												+ player.refresh_token;
										returnStr = getResult(urlStr, "", "utf-8");
										json = JSON.parseObject(returnStr);
										if (json.containsKey("access_token")) {
											player.access_token = json.getString("access_token");
											player.refresh_token = json.getString("refresh_token");
										} else {
											// MsgUtils.sendNotice(clientId,
											// StringUtils.encodeURIComponent("获取access_token错误！请重试" + -3));
                                            //微信登录：-1000代表获取access_token失败，需要重新以code方式登录
											MsgUtils.sendError(clientId, MsgID.CMD_LOGIN_RESPONSE, -1000);
											return;// 返回数据
										}
									}
								} else {
									MsgUtils.sendNotice(clientId, StringUtils.encodeURIComponent("网络错误！请重试" + -4));
									MsgUtils.sendError(clientId, MsgID.CMD_LOGIN_RESPONSE, -1);
									return;
								}
							}

						} else {
							MsgUtils.sendNotice(clientId, StringUtils.encodeURIComponent("用户不存在！请重试" + -5));
							MsgUtils.sendError(clientId, MsgID.CMD_LOGIN_RESPONSE, -1);
							return;
						}
					}
				} else if (loginTypeStr.equals("yiyi")) {
					loginType = 1;
					if (data.containsKey("uid")) {
						player = PlayerService.findPlayerByUid(data.getIntValue("uid"));
						if (player != null) {
							if (!player.secretKey.equals(MD5.to32MD5(data.getString("secretKey") + player.salt))) {
								MsgUtils.sendNotice(player, StringUtils.encodeURIComponent("账号或密码错误!"));
								return;
							}
						} else {
							MsgUtils.sendNotice(clientId, StringUtils.encodeURIComponent("账号或密码错误!"));
							return;
						}
					} else {
						return;
					}

				} else if (data.getString("loginType").equals("gm")) {
					loginType = 0;
					player = PlayerService.findGM(false, data.getString("uid"));
					if (player == null || player.secretKey != data.getString("secretKey")) {
						MemPool.kickoffClientId(clientId);
						return;
					}
					if (channelEntity != null) {
						if (!player.ip.equals(ip)) {
							logger.info("ip错误，异地登陆：");
							logger.info("用户IP：" + player.ip);
							logger.info("ChinnelIP：" + ip);
						}
						channelEntity
								.setNeedCompress(data.containsKey("needComp") ? data.getBoolean("needComp") : false);
					}
					this.updateUserInfo(player, clientId, data, ip);
					player.ipCN = getIpCN(player.ip);

					sendToPlayer(player, player.getMsg(MsgID.CMD_GMLOGIN_RESPONSE));
					return;
				} else {
					// logger.warn("login6");
					loginType = 3;
					if (data.containsKey("uid")) {
						player = PlayerService.findPlayerByUid(data.getIntValue("uid"));
						if (player != null) {
							// logger.warn("login8");
							if (!player.secretKey.equals(MD5.to32MD5(data.getString("secretKey") + player.salt))) {
								logger.warn("secretKey:" + MD5.to32MD5(data.getString("secretKey") + player.salt));
								// String data1 = String.format("{'notice':'%s','code':%d}",
								// StringUtils.encodeURIComponent("登陆信息变更!"), 1);
								// NettyUtils.sendToPlayer(clientId, MsgUtils.toJSON(MsgID.CMD_NOTICE_RESPONSE,
								// data1));
								MsgUtils.sendNotice(clientId, StringUtils.encodeURIComponent("数据错误！请重试" + -2));
								MsgUtils.sendError(clientId, MsgID.CMD_LOGIN_RESPONSE, -3);
								return;
								// player.secretKey=MD5.to32MD5(data.getString("secretKey") + player.salt);
							}
							this.updateUserInfo(player, clientId, data, ip);
						} else {
							// logger.warn("login61");
						}
					} else {
						return;
					}
				}
			} else {
				player = PlayerService.findPlayer(true, data.getString("unionid"));
				return;
			}
			// if (player != null && _CLIENTID_UID_MAP.containsKey(clientId)) {// 玩家在线
			// int _uid = _CLIENTID_UID_MAP.get(clientId);
			// if (_UID_PLAYER_MAP.containsKey(_uid)) {
			// // PlayerModel player_temp = _UID_PLAYER_MAP.get(_uid);
			// // if(!player.equals(player_temp))player=player_temp;
			// _UID_PLAYER_MAP.put(_uid, player);
			// }
			// } else {

			if (player == null) {// 新玩家
				if (MsgFactoryManager.getInstance()._CHECK_WXINVALIDIP_MAP.containsKey(ip)
						&& Constants.isCheckUserEnable && !Constants.isTest) {
					return;
				}
				// logger.warn("login7");
				player = new PlayerModel(data, ip, loginType);
				if (json != null) {
					player.access_token = json.getString("access_token");
					player.refresh_token = json.getString("refresh_token");
					player.openid = json.getString("openid");
					if (json.containsKey("unionid")) {
						player.unionid = json.getString("unionid");
					}
				} else {
					// logger.warn("login71");
				}
				if (loginTypeStr.equals("yiyi") || StringUtils.noEmpty(player.openid))
					player.isAccount = 1;
				PlayerService.insertSync(player);// 添加数据库
			} else if (_UID_PLAYER_MAP.containsKey(player.uid) && !_CLIENTID_UID_MAP.containsKey(clientId)) {// 别处登陆登陆
				player.roomId = -1;
				player.position = -1;
				MsgUtils.sendNotice(clientId, StringUtils.encodeURIComponent("你的账号在别处登陆！请重新登陆：" + -1));
				MsgUtils.sendError(player.clientId, MsgID.CMD_LOGIN_RESPONSE, -2);
				// logger.warn("login72");
			}
			// logger.warn("login8");
			/// logger.info("signinclientId:" + clientId+";player.uid:"+player.uid);
			// }
			// if(_UID_PLAYER_MAP.size()>)最大在线玩家限制

			if (json != null) {
				String urlStr = "https://api.weixin.qq.com/sns/userinfo?access_token=" + player.access_token
						+ "&openid=" + player.openid;
				String returnStr = getResult(urlStr, "", "utf-8");
				json = JSON.parseObject(returnStr);
				if (json.containsKey("headimgurl")) {
					player.nickname = json.getString("nickname");
					player.portrait = json.getString("headimgurl");
					player.sex = json.getIntValue("sex");
					player.country = json.getString("country");
					player.city = json.getString("city");
					player.province = json.getString("province");
					player.privilege = JSONArray.parseObject(json.getJSONArray("privilege").toJSONString(),
							new TypeReference<ArrayList<String>>() {
							});
				}
			} else {
				// logger.warn("login9");
			}

			player.isReconnect = false;
			if (player.isDisabled) {// 老玩家封号
				sendToPlayer(player, player.getMsg(MsgID.CMD_ISDISABLE_RESPONSE));
				MemPool.kickoffClientId(clientId);
				logger.warn("玩家封号:" + "nickname=" + player.nickname + ",uid=" + player.uid + ",ip=" + player.ip);
				return;
			}

			String ipCN_NEW = player.ipCN;
			if (!player.ip.equals(ip)) {
				try{
					ipCN_NEW = getIpCN(ip);
				}catch (Exception e){
				    //ip地址这里没什么用  有时候会出现解析异常，这里捕获处理
					e.printStackTrace();
				}
			}

			if (channelEntity != null) {
				if (!player.ipCN.equals(ipCN_NEW)) {
					logger.info(
							"用户异地登陆/更换IP|" + "原IP：" + player.ip + "-" + player.ipCN + ",新IP：" + ip + "-" + ipCN_NEW);
				}
				channelEntity.setNeedCompress(data.containsKey("needComp") ? data.getBoolean("needComp") : false);
			}
			player.ipCN = ipCN_NEW;

			this.updateUserInfo(player, clientId, data, ip);
			// logger.warn("login11");
			player.loginType=loginType;

			//更新登录信息
            PlayerService.updateSync(player);


			// 发送登陆消息
			sendToPlayer(player, player.getMsg(MsgID.CMD_LOGIN_RESPONSE));

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
			logger.warn("login failed: " + data.toJSONString());
		}
	}

	private JSONObject wxCodeLogin(JSONObject data, String clientId, int type) throws Throwable, NoSuchProviderException {
		if (!data.containsKey("code"))
			return null;
		String code = data.getString("code");
		if (!StringUtils.noEmpty(code))
			return null;
        WXInfoEnum wxInfoEnum = WXInfoEnum.obtainWXInfo(type);
        String appId = wxInfoEnum.getAppId();
        String secret = wxInfoEnum.getSecret();
        String urlStr = "https://api.weixin.qq.com/sns/oauth2/access_token?appid=" + appId +
                "&secret=" + secret +
                "&code=" + code + "&grant_type=authorization_code";
		logger.warn("urlStr");
		String returnStr = getResult(urlStr, "", "utf-8");
		JSONObject json = JSON.parseObject(returnStr);
		if (json.containsKey("errcode")) {
			MsgUtils.sendNotice(clientId, StringUtils.encodeURIComponent("登陆失败：" + json.getIntValue("errcode")));
			MsgUtils.sendError(clientId, MsgID.CMD_LOGIN_RESPONSE, -1);
			return null;
		}
		return json;
	}

	// 更新玩家状态
	private void updateUserInfo(PlayerModel player, final String clientId, final JSONObject data, final String ip) {
		player.version = data.getString("version");
		player.hasLogined = true;
		player.clientId = clientId;
		player.ip = ip;
		player.last_record_time=System.currentTimeMillis();
		_CLIENTID_UID_MAP.put(clientId, player.uid);
		_UID_PLAYER_MAP.put(player.uid, player);
		logger.warn("login:" + clientId + "," + ip);
		// logger.warn("player:"+MsgFactoryManager.getInstance()._UID_PLAYER_MAP.get(player.uid).hasLogined);
	}

	private static String getIpCN(String ip) throws Throwable, NoSuchProviderException {
		// 测试ip 219.136.134.157 中国=华南=广东省=广州市=越秀区=电信
		String address = null;
		try {
			address = getAddresses("ip=" + ip, "utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return address;
	}

	public static String getAddresses(String content, String encodingString)
			throws Throwable, NoSuchProviderException, UnsupportedEncodingException {
		// 这里调用pconline的接口
		String urlStr = "http://ip.taobao.com/service/getIpInfo.php";
		// 从http://whois.pconline.com.cn取得IP所在的省市区信息
		String returnStr = getResult(urlStr, content, encodingString);
		if (returnStr != null) {
			// 处理返回的省市区信息
			// System.out.println(returnStr);
			String[] temp = returnStr.split(",");
			if (temp.length < 3) {
				return "未知区域";// 无效IP，局域网测试
			}
			String region = " ";
			region = (temp[5].split(":"))[1].replaceAll("\"", "");
			region = decodeUnicode(region);// 省份

			String country = "";
			String area = "";
			// String region = "";
			String city = "";
			String county = "";
			String isp = "";
			for (int i = 0; i < temp.length; i++) {
				switch (i) {
				case 1:
					country = (temp[i].split(":"))[2].replaceAll("\"", "");
					country = decodeUnicode(country);// 国家
					break;
				case 3:
					area = (temp[i].split(":"))[1].replaceAll("\"", "");
					area = decodeUnicode(area);// 地区
					break;
				case 5:
					region = (temp[i].split(":"))[1].replaceAll("\"", "");
					region = decodeUnicode(region);// 省份
					break;
				case 7:
					city = (temp[i].split(":"))[1].replaceAll("\"", "");
					city = decodeUnicode(city);// 市区
					break;
				case 9:
					county = (temp[i].split(":"))[1].replaceAll("\"", "");
					county = decodeUnicode(county);// 地区
					break;
				case 11:
					isp = (temp[i].split(":"))[1].replaceAll("\"", "");
					isp = decodeUnicode(isp); // ISP公司
					break;

				}
			}
			// region=country + "=" + area + "=" + region + "=" + city + "=" + county + "="
			// + isp;
			// System.out.println(country + "=" + area + "=" + region + "=" + city + "=" +
			// county + "=" + isp);
			logger.info("login:" + "country=" + country + ",area=" + area + ",region=" + region + ",city=" + city
					+ ",county=" + county + ",isp=" + isp);
			return country + area + region;
		}
		return "未知区域";
	}

	private static String getResult(String urlStr, String content, String encoding)
			throws Throwable, NoSuchProviderException {
		URL url = null;
		HttpURLConnection connection = null;
		try {

			SSLContext sslcontext = SSLContext.getInstance("SSL", "SunJSSE");// 第一个参数为协议,第二个参数为提供者(可以缺省)
			TrustManager[] tm = { new MyX509TrustManager() };
			sslcontext.init(null, tm, new SecureRandom());
			HostnameVerifier ignoreHostnameVerifier = new HostnameVerifier() {
				public boolean verify(String s, SSLSession sslsession) {
					System.out.println("WARNING: Hostname is not matched for cert.");
					return true;
				}
			};
			HttpsURLConnection.setDefaultHostnameVerifier(ignoreHostnameVerifier);
			HttpsURLConnection.setDefaultSSLSocketFactory(sslcontext.getSocketFactory());
			// String pn=URLEncoder.encode(urlStr, "utf-8");
			url = new URL(urlStr);
			connection = (HttpURLConnection) url.openConnection();// 新建连接实例
			connection.setConnectTimeout(2000);// 设置连接超时时间，单位毫秒
			connection.setReadTimeout(2000);// 设置读取数据超时时间，单位毫秒
			connection.setDoOutput(true);// 是否打开输出流 true|false
			connection.setDoInput(true);// 是否打开输入流true|false
			connection.setRequestMethod("POST");// 提交方法POST|GET
			connection.setUseCaches(false);// 是否缓存true|false
			connection.connect();// 打开连接端口
			DataOutputStream out = new DataOutputStream(connection.getOutputStream());// 打开输出流往对端服务器写数据
			out.writeBytes(content);// 写数据,也就是提交你的表单 name=xxx&pwd=xxx
			out.flush();// 刷新
			out.close();// 关闭输出流
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));// 往对端写完数据对端服务器返回数据
			// ,以BufferedReader流来读取
			StringBuffer buffer = new StringBuffer();
			String line = "";
			while ((line = reader.readLine()) != null) {
				buffer.append(line);
			}
			reader.close();
			return buffer.toString();
		} catch (IOException e) {
			// e.printStackTrace();
			logger.error("getIpNetError:" + e.toString());
		} finally {
			if (connection != null) {
				connection.disconnect();// 关闭连接
			}
		}
		return null;
	}

	public static String decodeUnicode(String theString) {
		char aChar;
		int len = theString.length();
		StringBuffer outBuffer = new StringBuffer(len);
		for (int x = 0; x < len;) {
			aChar = theString.charAt(x++);
			if (aChar == '\\') {
				aChar = theString.charAt(x++);
				if (aChar == 'u') {
					int value = 0;
					for (int i = 0; i < 4; i++) {
						aChar = theString.charAt(x++);
						switch (aChar) {
						case '0':
						case '1':
						case '2':
						case '3':
						case '4':
						case '5':
						case '6':
						case '7':
						case '8':
						case '9':
							value = (value << 4) + aChar - '0';
							break;
						case 'a':
						case 'b':
						case 'c':
						case 'd':
						case 'e':
						case 'f':
							value = (value << 4) + 10 + aChar - 'a';
							break;
						case 'A':
						case 'B':
						case 'C':
						case 'D':
						case 'E':
						case 'F':
							value = (value << 4) + 10 + aChar - 'A';
							break;
						default:
							throw new IllegalArgumentException("Malformed      encoding.");
						}
					}
					outBuffer.append((char) value);
				} else {
					if (aChar == 't') {
						aChar = '\t';
					} else if (aChar == 'r') {
						aChar = '\r';
					} else if (aChar == 'n') {
						aChar = '\n';
					} else if (aChar == 'f') {
						aChar = '\f';
					}
					outBuffer.append(aChar);
				}
			} else {
				outBuffer.append(aChar);
			}
		}
		return outBuffer.toString();
	}
}
