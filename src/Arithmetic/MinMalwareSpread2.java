package Arithmetic;

/**
 * 我们可以从初始列表中删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接
 *
 * @author xiaobaobao
 * @date 2020/9/20，21:19
 */
public class MinMalwareSpread2 {
	public static void main(String[] args) {
		int[][] a = {
				{1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 1, 0, 1, 0, 1, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 0, 0},
				{0, 0, 1, 0, 1, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 1, 0, 0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 1}};
		int[] b = {6, 0, 4};
		System.out.println(new MinMalwareSpread2().minMalwareSpread(a, b));
	}

	public int minMalwareSpread(int[][] graph, int[] initial) {
		if (initial.length == 1) {
			return initial[0];
		}

		//每一个通路标记一种颜色
		int[] colorCount = new int[graph.length];
		for (int i : initial) {
			for (int[] ints : graph) {
				if (ints[i] == 1) {
					colorCount[i]++;
				}
			}
		}

		int ans = -1;
		for (int i = initial.length - 1; i >= 0; i--) {
			if (ans == -1)
				ans = i;
			else if (colorCount[initial[i]] > colorCount[initial[ans]])
				ans = i;
		}

		return ans;
	}

}
