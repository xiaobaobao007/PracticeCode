package Arithmetic;

import java.util.Arrays;

/**
 * 我们可以从初始列表中删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接
 *
 * @author xiaobaobao
 * @date 2020/9/20，21:19
 */
public class MinMalwareSpread2 {

	public static void main(String[] args) {
		// int[][] a = {
		// 		{1, 1, 0, 0},
		// 		{1, 1, 0, 1},
		// 		{0, 0, 1, 0},
		// 		{0, 1, 0, 1}};
		// int[] b = {3, 0};

		// int[][] a = {
		// 		{1, 1, 0},
		// 		{1, 1, 1},
		// 		{0, 1, 1}};
		// int[] b = {0, 1};

		int[][] a = {
				{1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 1, 0, 1, 0, 1, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 0, 0},
				{0, 0, 1, 0, 1, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 1, 0, 0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 1}};
		int[] b = {6, 0, 4};
		System.out.println(new MinMalwareSpread2().minMalwareSpread(a, b));
	}

	public int minMalwareSpread(int[][] graph, int[] initial) {
		if (initial.length == 1) {
			return initial[0];
		}
		int maxNum = -1;
		int p = 0;
		int num;
		int[] map = new int[graph.length];
		for (int i : initial) {
			num = bmy(graph, map, i);
			if (num > maxNum) {
				maxNum = num;
				p = i;
			} else if (num == maxNum && i < p) {
				p = i;
			}
			System.out.println(Arrays.toString(map));
			Arrays.fill(map, 0);
		}
		return p;
	}

	public int bmy(int[][] grap, int[] map, int i) {
		int num = 0;
		for (int j = 0; j < grap.length; j++) {
			if (j == i) {
				continue;
			}
			if (map[j] == 0 && grap[j][i] == 1) {
				map[j] = 1;
				num += bmy(grap, map, j);
			}
		}
		num++;
		return num;
	}

}
